/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010- Facebook, Inc. (http://www.facebook.com)         |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by HipHop Compiler

#include <php/classes/directoryiterator.h>
#include <php/classes/directoryiterator.fws.h>

// Dependencies
#include <php/classes/exception.h>
#include <php/classes/iterator.h>
#include <php/classes/splfile.h>
#include <runtime/ext/ext.h>
#include <runtime/eval/eval.h>
namespace hphp_impl_starter {}

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

/* preface starts */
extern CallInfo ci_;
/* preface finishes */
/* SRC: classes/directoryiterator.php line 122 */
const int64 q_RecursiveDirectoryIterator_CURRENT_AS_SELF = 0LL;
const int64 q_RecursiveDirectoryIterator_CURRENT_AS_FILEINFO = 16LL;
const int64 q_RecursiveDirectoryIterator_CURRENT_AS_PATHNAME = 32LL;
const int64 q_RecursiveDirectoryIterator_KEY_AS_PATHNAME = 0LL;
const int64 q_RecursiveDirectoryIterator_KEY_AS_FILENAME = 256LL;
const int64 q_RecursiveDirectoryIterator_NEW_CURRENT_AND_KEY = 272LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_RecursiveDirectoryIterator
Variant c_RecursiveDirectoryIterator::os_getInit(CStrRef s) {
  return c_DirectoryIterator::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_RecursiveDirectoryIterator
Variant c_RecursiveDirectoryIterator::os_get(CStrRef s) {
  return c_DirectoryIterator::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_RecursiveDirectoryIterator
Variant &c_RecursiveDirectoryIterator::os_lval(CStrRef s) {
  return c_DirectoryIterator::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_RecursiveDirectoryIterator
void c_RecursiveDirectoryIterator::o_getArray(Array &props, bool pubOnly) const {
  c_DirectoryIterator::o_getArray(props, pubOnly);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_RecursiveDirectoryIterator
void c_RecursiveDirectoryIterator::o_setArray(CArrRef props) {
  c_DirectoryIterator::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_RecursiveDirectoryIterator
Variant * c_RecursiveDirectoryIterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_GUARD_STRING(0x71089C29FE923FA7LL, SplFileInfo) { return c_SplFileInfo::o_realPropPrivate(prop, flags); }
      break;
    default:
      break;
  }
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_RecursiveDirectoryIterator
Variant * c_RecursiveDirectoryIterator::o_realPropPublic(CStrRef s, int flags) const {
  return c_DirectoryIterator::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_RecursiveDirectoryIterator
Variant * c_RecursiveDirectoryIterator::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_RecursiveDirectoryIterator
Variant c_RecursiveDirectoryIterator::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 15) {
    case 0:
      HASH_RETURN(0x4A34A9DA11ED8F50LL, q_RecursiveDirectoryIterator_KEY_AS_FILENAME, "KEY_AS_FILENAME");
      break;
    case 1:
      HASH_RETURN(0x6AA4D24FB118FCF1LL, q_RecursiveDirectoryIterator_KEY_AS_PATHNAME, "KEY_AS_PATHNAME");
      break;
    case 4:
      HASH_RETURN(0x0F0DCA1A52157D84LL, q_RecursiveDirectoryIterator_NEW_CURRENT_AND_KEY, "NEW_CURRENT_AND_KEY");
      break;
    case 5:
      HASH_RETURN(0x29191B08277C8E85LL, q_RecursiveDirectoryIterator_CURRENT_AS_SELF, "CURRENT_AS_SELF");
      break;
    case 6:
      HASH_RETURN(0x5C823ED8BD51E7F6LL, q_RecursiveDirectoryIterator_CURRENT_AS_FILEINFO, "CURRENT_AS_FILEINFO");
      break;
    case 15:
      HASH_RETURN(0x2D581F4C45121E5FLL, q_RecursiveDirectoryIterator_CURRENT_AS_PATHNAME, "CURRENT_AS_PATHNAME");
      break;
    default:
      break;
  }
  return c_DirectoryIterator::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_RecursiveDirectoryIterator
IMPLEMENT_CLASS(RecursiveDirectoryIterator)
bool c_RecursiveDirectoryIterator::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 15) {
    case 1:
      HASH_INSTANCEOF(0x66679538C5E6F0A1LL, NAMSTR(s_sys_ss22bfe43e, "Traversable"));
      break;
    case 3:
      HASH_INSTANCEOF(0x191964700AF036D3LL, NAMSTR(s_sys_ss49963173, "RecursiveIterator"));
      HASH_INSTANCEOF(0x60C47E7FE145DC43LL, NAMSTR(s_sys_ssc1c38583, "SeekableIterator"));
      break;
    case 7:
      HASH_INSTANCEOF(0x71089C29FE923FA7LL, NAMSTR(s_sys_ss914a58e9, "SplFileInfo"));
      break;
    case 8:
      HASH_INSTANCEOF(0x464D3427431A6ED8LL, NAMSTR(s_sys_ss80c39bb4, "RecursiveDirectoryIterator"));
      break;
    case 14:
      HASH_INSTANCEOF(0x7754323897E8A15ELL, NAMSTR(s_sys_ssc72eef1f, "DirectoryIterator"));
      HASH_INSTANCEOF(0x0636A5F84AF9D29ELL, NAMSTR(s_sys_ssc64ebfff, "Iterator"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_RecursiveDirectoryIterator::cloneImpl() {
  c_RecursiveDirectoryIterator *obj = NEWOBJ(c_RecursiveDirectoryIterator)();
  c_RecursiveDirectoryIterator::cloneSet(obj);
  return obj;
}
void c_RecursiveDirectoryIterator::cloneSet(ObjectData *cl) {
  c_RecursiveDirectoryIterator *clone = static_cast<c_RecursiveDirectoryIterator*>(cl);
  c_DirectoryIterator::cloneSet(clone);
}
CallInfo c_RecursiveDirectoryIterator::ci_next((void*)&c_RecursiveDirectoryIterator::i_next, (void*)&c_RecursiveDirectoryIterator::ifa_next, 0, 4, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_key((void*)&c_RecursiveDirectoryIterator::i_key, (void*)&c_RecursiveDirectoryIterator::ifa_key, 0, 4, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_valid((void*)&c_RecursiveDirectoryIterator::i_valid, (void*)&c_RecursiveDirectoryIterator::ifa_valid, 0, 4, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci___tostring((void*)&c_RecursiveDirectoryIterator::i___tostring, (void*)&c_RecursiveDirectoryIterator::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_getsubpathname((void*)&c_RecursiveDirectoryIterator::i_getsubpathname, (void*)&c_RecursiveDirectoryIterator::ifa_getsubpathname, 0, 4, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_getsubpath((void*)&c_RecursiveDirectoryIterator::i_getsubpath, (void*)&c_RecursiveDirectoryIterator::ifa_getsubpath, 0, 4, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci___construct((void*)&c_RecursiveDirectoryIterator::i___construct, (void*)&c_RecursiveDirectoryIterator::ifa___construct, 2, 4, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_haschildren((void*)&c_RecursiveDirectoryIterator::i_haschildren, (void*)&c_RecursiveDirectoryIterator::ifa_haschildren, 0, 4, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_seek((void*)&c_RecursiveDirectoryIterator::i_seek, (void*)&c_RecursiveDirectoryIterator::ifa_seek, 1, 4, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_getchildren((void*)&c_RecursiveDirectoryIterator::i_getchildren, (void*)&c_RecursiveDirectoryIterator::ifa_getchildren, 0, 4, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_current((void*)&c_RecursiveDirectoryIterator::i_current, (void*)&c_RecursiveDirectoryIterator::ifa_current, 0, 4, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_rewind((void*)&c_RecursiveDirectoryIterator::i_rewind, (void*)&c_RecursiveDirectoryIterator::ifa_rewind, 0, 4, 0x0000000000000000LL);
Variant c_RecursiveDirectoryIterator::i_next(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::next", 0, 1);
  return (self->t_next(), null);
}
Variant c_RecursiveDirectoryIterator::i_key(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_RecursiveDirectoryIterator::i_valid(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_RecursiveDirectoryIterator::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_RecursiveDirectoryIterator::i_getsubpathname(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::getSubPathname", 0, 1);
  return (self->t_getsubpathname());
}
Variant c_RecursiveDirectoryIterator::i_getsubpath(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::getSubPath", 0, 1);
  return (self->t_getsubpath());
}
Variant c_RecursiveDirectoryIterator::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("RecursiveDirectoryIterator::__construct", count, 1, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_RecursiveDirectoryIterator::i_haschildren(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::hasChildren", 0, 1);
  return (self->t_haschildren());
}
Variant c_RecursiveDirectoryIterator::i_seek(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("RecursiveDirectoryIterator::seek", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_seek(arg0), null);
  }
}
Variant c_RecursiveDirectoryIterator::i_getchildren(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::getChildren", 0, 1);
  return (self->t_getchildren());
}
Variant c_RecursiveDirectoryIterator::i_current(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_RecursiveDirectoryIterator::i_rewind(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::rewind", 0, 1);
  return (self->t_rewind(), null);
}
Variant c_RecursiveDirectoryIterator::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::next", 0, 1);
  return (self->t_next(), null);
}
Variant c_RecursiveDirectoryIterator::ifa_key(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_RecursiveDirectoryIterator::ifa_valid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_RecursiveDirectoryIterator::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_RecursiveDirectoryIterator::ifa_getsubpathname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::getSubPathname", 0, 1);
  return (self->t_getsubpathname());
}
Variant c_RecursiveDirectoryIterator::ifa_getsubpath(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::getSubPath", 0, 1);
  return (self->t_getsubpath());
}
Variant c_RecursiveDirectoryIterator::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("RecursiveDirectoryIterator::__construct", count, 1, 2, 2);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1(a1);
  return (self->t___construct(arg0, arg1), null);
}
Variant c_RecursiveDirectoryIterator::ifa_haschildren(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::hasChildren", 0, 1);
  return (self->t_haschildren());
}
Variant c_RecursiveDirectoryIterator::ifa_seek(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("RecursiveDirectoryIterator::seek", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_seek(arg0), null);
}
Variant c_RecursiveDirectoryIterator::ifa_getchildren(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::getChildren", 0, 1);
  return (self->t_getchildren());
}
Variant c_RecursiveDirectoryIterator::ifa_current(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_RecursiveDirectoryIterator::ifa_rewind(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("RecursiveDirectoryIterator::rewind", 0, 1);
  return (self->t_rewind(), null);
}
bool c_RecursiveDirectoryIterator::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s ATTRIBUTE_UNUSED (*mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss9943cbf4, "valid")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_valid;
        return true;
      }
      break;
    case 7:
      HASH_GUARD_LITSTR(0x7EF5445C77054C67LL, NAMSTR(s_sys_ss6a9626a3, "seek")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_seek;
        return true;
      }
      break;
    case 9:
      HASH_GUARD_LITSTR(0x430BA7B88ED3A809LL, NAMSTR(s_sys_ssf0e3c7d6, "getSubPathname")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_getsubpathname;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss941ca25f, "rewind")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_rewind;
        return true;
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x732EC1BDA8EC520FLL, NAMSTR(s_sys_ss68d731f7, "getChildren")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_getchildren;
        return true;
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss12e90587, "key")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_key;
        return true;
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6974a1cc, "__toString")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci___tostring;
        return true;
      }
      break;
    case 21:
      HASH_GUARD_LITSTR(0x40044334DA397C15LL, NAMSTR(s_sys_ssf6be66f9, "hasChildren")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_haschildren;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss50652d33, "next")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_next;
        return true;
      }
      break;
    case 27:
      HASH_GUARD_LITSTR(0x7CF26A0E76B5E27BLL, NAMSTR(s_sys_sse3783d41, "getSubPath")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_getsubpath;
        return true;
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ssb3a5c1b3, "current")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_current;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ssa1b87da7, "__construct")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci___construct;
        return true;
      }
      break;
    default:
      break;
  }
  return c_DirectoryIterator::os_get_call_info(mcp, hash);
}
bool c_RecursiveDirectoryIterator::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  mcp.obj = this;
  return os_get_call_info(mcp, hash);
}
c_RecursiveDirectoryIterator *c_RecursiveDirectoryIterator::create(CVarRef v_path, CVarRef v_flags //  = NAMVAR(s_sys_svi86af027e, 16LL) /* RecursiveDirectoryIterator::CURRENT_AS_FILEINFO */
) {
  CountableHelper h(this);
  init();
  t___construct(v_path, v_flags);
  return this;
}
void c_RecursiveDirectoryIterator::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) throw_wrong_arguments("RecursiveDirectoryIterator::__construct", count, 1, 2, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  } while (false);
}
void c_RecursiveDirectoryIterator::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_RecursiveDirectoryIterator::ci___construct;
  mcp.obj = this;
}
struct ObjectStaticCallbacks cw_RecursiveDirectoryIterator = {
  c_RecursiveDirectoryIterator::os_getInit,
  c_RecursiveDirectoryIterator::os_get,
  c_RecursiveDirectoryIterator::os_lval,
  c_RecursiveDirectoryIterator::os_invoke,
  c_RecursiveDirectoryIterator::os_constant,
  c_RecursiveDirectoryIterator::os_get_call_info
};
void c_RecursiveDirectoryIterator::init() {
  c_DirectoryIterator::init();
}
/* SRC: classes/directoryiterator.php line 132 */
void c_RecursiveDirectoryIterator::t___construct(Variant v_path, Variant v_flags //  = 16LL /* RecursiveDirectoryIterator::CURRENT_AS_FILEINFO */
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::__construct);
  bool oldInCtor = gasInCtor(true);
  {
    bool tmp0;
    {
      bool tmp1((x_hphp_recursivedirectoryiterator___construct(GET_THIS_TYPED(RecursiveDirectoryIterator), toString(v_path), toInt64(v_flags))));
      tmp0 = (!(tmp1));
    }
    if (tmp0) {
      {
        {
          p_UnexpectedValueException tmp0 = NEWOBJ(c_UnexpectedValueException)();
          throw_exception((tmp0->create(concat3(NAMSTR(s_sys_ssf0ea8ac1, "RecursiveDirectoryIterator::__construct("), toString(v_path), NAMSTR(s_sys_ssfb6412d4, "): failed to open dir"))), tmp0));
        }
      }
    }
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 140 */
Variant c_RecursiveDirectoryIterator::t_current() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::current);
  return x_hphp_recursivedirectoryiterator_current(GET_THIS_TYPED(RecursiveDirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 152 */
Variant c_RecursiveDirectoryIterator::t_key() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::key);
  return x_hphp_recursivedirectoryiterator_key(GET_THIS_TYPED(RecursiveDirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 164 */
void c_RecursiveDirectoryIterator::t_next() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::next);
  x_hphp_recursivedirectoryiterator_next(GET_THIS_TYPED(RecursiveDirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 176 */
void c_RecursiveDirectoryIterator::t_rewind() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::rewind);
  x_hphp_recursivedirectoryiterator_rewind(GET_THIS_TYPED(RecursiveDirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 180 */
void c_RecursiveDirectoryIterator::t_seek(CVarRef v_position) {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::seek);
  x_hphp_recursivedirectoryiterator_seek(GET_THIS_TYPED(RecursiveDirectoryIterator), toInt64(v_position));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 184 */
String c_RecursiveDirectoryIterator::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::__toString);
  return x_hphp_recursivedirectoryiterator___tostring(GET_THIS_TYPED(RecursiveDirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 188 */
bool c_RecursiveDirectoryIterator::t_valid() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::valid);
  return x_hphp_recursivedirectoryiterator_valid(GET_THIS_TYPED(RecursiveDirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 201 */
bool c_RecursiveDirectoryIterator::t_haschildren() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::hasChildren);
  return x_hphp_recursivedirectoryiterator_haschildren(GET_THIS_TYPED(RecursiveDirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 214 */
Object c_RecursiveDirectoryIterator::t_getchildren() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::getChildren);
  return x_hphp_recursivedirectoryiterator_getchildren(GET_THIS_TYPED(RecursiveDirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 228 */
String c_RecursiveDirectoryIterator::t_getsubpath() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::getSubPath);
  return x_hphp_recursivedirectoryiterator_getsubpath(GET_THIS_TYPED(RecursiveDirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 242 */
String c_RecursiveDirectoryIterator::t_getsubpathname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::getSubPathname);
  return x_hphp_recursivedirectoryiterator_getsubpathname(GET_THIS_TYPED(RecursiveDirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 11 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DirectoryIterator
Variant c_DirectoryIterator::os_getInit(CStrRef s) {
  return c_SplFileInfo::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DirectoryIterator
Variant c_DirectoryIterator::os_get(CStrRef s) {
  return c_SplFileInfo::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DirectoryIterator
Variant &c_DirectoryIterator::os_lval(CStrRef s) {
  return c_SplFileInfo::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_DirectoryIterator
void c_DirectoryIterator::o_getArray(Array &props, bool pubOnly) const {
  c_SplFileInfo::o_getArray(props, pubOnly);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_DirectoryIterator
void c_DirectoryIterator::o_setArray(CArrRef props) {
  c_SplFileInfo::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DirectoryIterator
Variant * c_DirectoryIterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_GUARD_STRING(0x71089C29FE923FA7LL, SplFileInfo) { return c_SplFileInfo::o_realPropPrivate(prop, flags); }
      break;
    default:
      break;
  }
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DirectoryIterator
Variant * c_DirectoryIterator::o_realPropPublic(CStrRef s, int flags) const {
  return c_SplFileInfo::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DirectoryIterator
Variant * c_DirectoryIterator::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DirectoryIterator
Variant c_DirectoryIterator::os_constant(const char *s) {
  return c_SplFileInfo::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DirectoryIterator
IMPLEMENT_CLASS(DirectoryIterator)
bool c_DirectoryIterator::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 15) {
    case 1:
      HASH_INSTANCEOF(0x66679538C5E6F0A1LL, NAMSTR(s_sys_ss22bfe43e, "Traversable"));
      break;
    case 3:
      HASH_INSTANCEOF(0x60C47E7FE145DC43LL, NAMSTR(s_sys_ssc1c38583, "SeekableIterator"));
      break;
    case 7:
      HASH_INSTANCEOF(0x71089C29FE923FA7LL, NAMSTR(s_sys_ss914a58e9, "SplFileInfo"));
      break;
    case 14:
      HASH_INSTANCEOF(0x7754323897E8A15ELL, NAMSTR(s_sys_ssc72eef1f, "DirectoryIterator"));
      HASH_INSTANCEOF(0x0636A5F84AF9D29ELL, NAMSTR(s_sys_ssc64ebfff, "Iterator"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_DirectoryIterator::cloneImpl() {
  c_DirectoryIterator *obj = NEWOBJ(c_DirectoryIterator)();
  c_DirectoryIterator::cloneSet(obj);
  return obj;
}
void c_DirectoryIterator::cloneSet(ObjectData *cl) {
  c_DirectoryIterator *clone = static_cast<c_DirectoryIterator*>(cl);
  c_SplFileInfo::cloneSet(clone);
}
CallInfo c_DirectoryIterator::ci_next((void*)&c_DirectoryIterator::i_next, (void*)&c_DirectoryIterator::ifa_next, 0, 4, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci_key((void*)&c_DirectoryIterator::i_key, (void*)&c_DirectoryIterator::ifa_key, 0, 4, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci_valid((void*)&c_DirectoryIterator::i_valid, (void*)&c_DirectoryIterator::ifa_valid, 0, 4, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci___tostring((void*)&c_DirectoryIterator::i___tostring, (void*)&c_DirectoryIterator::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci___construct((void*)&c_DirectoryIterator::i___construct, (void*)&c_DirectoryIterator::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci_seek((void*)&c_DirectoryIterator::i_seek, (void*)&c_DirectoryIterator::ifa_seek, 1, 4, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci_current((void*)&c_DirectoryIterator::i_current, (void*)&c_DirectoryIterator::ifa_current, 0, 4, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci_isdot((void*)&c_DirectoryIterator::i_isdot, (void*)&c_DirectoryIterator::ifa_isdot, 0, 4, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci_rewind((void*)&c_DirectoryIterator::i_rewind, (void*)&c_DirectoryIterator::ifa_rewind, 0, 4, 0x0000000000000000LL);
Variant c_DirectoryIterator::i_next(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::next", 0, 1);
  return (self->t_next(), null);
}
Variant c_DirectoryIterator::i_key(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_DirectoryIterator::i_valid(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_DirectoryIterator::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_DirectoryIterator::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("DirectoryIterator::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_DirectoryIterator::i_seek(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("DirectoryIterator::seek", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_seek(arg0), null);
  }
}
Variant c_DirectoryIterator::i_current(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_DirectoryIterator::i_isdot(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::isDot", 0, 1);
  return (self->t_isdot());
}
Variant c_DirectoryIterator::i_rewind(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::rewind", 0, 1);
  return (self->t_rewind(), null);
}
Variant c_DirectoryIterator::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::next", 0, 1);
  return (self->t_next(), null);
}
Variant c_DirectoryIterator::ifa_key(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_DirectoryIterator::ifa_valid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_DirectoryIterator::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_DirectoryIterator::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("DirectoryIterator::__construct", count, 1, 1, 2);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
Variant c_DirectoryIterator::ifa_seek(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("DirectoryIterator::seek", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_seek(arg0), null);
}
Variant c_DirectoryIterator::ifa_current(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_DirectoryIterator::ifa_isdot(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::isDot", 0, 1);
  return (self->t_isdot());
}
Variant c_DirectoryIterator::ifa_rewind(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("DirectoryIterator::rewind", 0, 1);
  return (self->t_rewind(), null);
}
bool c_DirectoryIterator::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s ATTRIBUTE_UNUSED (*mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss9943cbf4, "valid")) {
        mcp.ci = &c_DirectoryIterator::ci_valid;
        return true;
      }
      break;
    case 7:
      HASH_GUARD_LITSTR(0x7EF5445C77054C67LL, NAMSTR(s_sys_ss6a9626a3, "seek")) {
        mcp.ci = &c_DirectoryIterator::ci_seek;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss941ca25f, "rewind")) {
        mcp.ci = &c_DirectoryIterator::ci_rewind;
        return true;
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss12e90587, "key")) {
        mcp.ci = &c_DirectoryIterator::ci_key;
        return true;
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6974a1cc, "__toString")) {
        mcp.ci = &c_DirectoryIterator::ci___tostring;
        return true;
      }
      break;
    case 20:
      HASH_GUARD_LITSTR(0x08D1EA51B78DA5F4LL, NAMSTR(s_sys_ss5baf0fe3, "isDot")) {
        mcp.ci = &c_DirectoryIterator::ci_isdot;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss50652d33, "next")) {
        mcp.ci = &c_DirectoryIterator::ci_next;
        return true;
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ssb3a5c1b3, "current")) {
        mcp.ci = &c_DirectoryIterator::ci_current;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ssa1b87da7, "__construct")) {
        mcp.ci = &c_DirectoryIterator::ci___construct;
        return true;
      }
      break;
    default:
      break;
  }
  return c_SplFileInfo::os_get_call_info(mcp, hash);
}
bool c_DirectoryIterator::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  mcp.obj = this;
  return os_get_call_info(mcp, hash);
}
c_DirectoryIterator *c_DirectoryIterator::create(CVarRef v_path) {
  CountableHelper h(this);
  init();
  t___construct(v_path);
  return this;
}
void c_DirectoryIterator::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) throw_wrong_arguments("DirectoryIterator::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_DirectoryIterator::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DirectoryIterator::ci___construct;
  mcp.obj = this;
}
struct ObjectStaticCallbacks cw_DirectoryIterator = {
  c_DirectoryIterator::os_getInit,
  c_DirectoryIterator::os_get,
  c_DirectoryIterator::os_lval,
  c_DirectoryIterator::os_invoke,
  c_DirectoryIterator::os_constant,
  c_DirectoryIterator::os_get_call_info
};
void c_DirectoryIterator::init() {
  c_SplFileInfo::init();
}
/* SRC: classes/directoryiterator.php line 14 */
void c_DirectoryIterator::t___construct(Variant v_path) {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::__construct);
  bool oldInCtor = gasInCtor(true);
  {
    bool tmp0;
    {
      bool tmp1((x_hphp_directoryiterator___construct(GET_THIS_TYPED(DirectoryIterator), toString(v_path))));
      tmp0 = (!(tmp1));
    }
    if (tmp0) {
      {
        {
          p_UnexpectedValueException tmp0 = NEWOBJ(c_UnexpectedValueException)();
          throw_exception((tmp0->create(concat3(NAMSTR(s_sys_ssdd233bb0, "DirectoryIterator::__construct("), toString(v_path), NAMSTR(s_sys_ssfb6412d4, "): failed to open dir"))), tmp0));
        }
      }
    }
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 29 */
Variant c_DirectoryIterator::t_current() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::current);
  return x_hphp_directoryiterator_current(GET_THIS_TYPED(DirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 41 */
Variant c_DirectoryIterator::t_key() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::key);
  return x_hphp_directoryiterator_key(GET_THIS_TYPED(DirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 53 */
void c_DirectoryIterator::t_next() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::next);
  x_hphp_directoryiterator_next(GET_THIS_TYPED(DirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 65 */
void c_DirectoryIterator::t_rewind() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::rewind);
  x_hphp_directoryiterator_rewind(GET_THIS_TYPED(DirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 79 */
void c_DirectoryIterator::t_seek(CVarRef v_position) {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::seek);
  x_hphp_directoryiterator_seek(GET_THIS_TYPED(DirectoryIterator), toInt64(v_position));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 83 */
String c_DirectoryIterator::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::__toString);
  return x_hphp_directoryiterator___tostring(GET_THIS_TYPED(DirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 96 */
bool c_DirectoryIterator::t_valid() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::valid);
  return x_hphp_directoryiterator_valid(GET_THIS_TYPED(DirectoryIterator));
}
namespace hphp_impl_splitter {}
/* SRC: classes/directoryiterator.php line 109 */
bool c_DirectoryIterator::t_isdot() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::isDot);
  return x_hphp_directoryiterator_isdot(GET_THIS_TYPED(DirectoryIterator));
}
namespace hphp_impl_splitter {}
Object co_RecursiveDirectoryIterator(CArrRef params, bool init /* = true */) {
  return Object((NEWOBJ(c_RecursiveDirectoryIterator)())->dynCreate(params, init));
}
Object coo_RecursiveDirectoryIterator() {
  Object r(NEWOBJ(c_RecursiveDirectoryIterator)());
  r->init();
  return r;
}
Object co_DirectoryIterator(CArrRef params, bool init /* = true */) {
  return Object((NEWOBJ(c_DirectoryIterator)())->dynCreate(params, init));
}
Object coo_DirectoryIterator() {
  Object r(NEWOBJ(c_DirectoryIterator)());
  r->init();
  return r;
}
Variant pm_php$classes$directoryiterator_php(bool incOnce /* = false */, LVariableTable* variables /* = NULL */, Globals *globals /* = get_globals() */) {
  PSEUDOMAIN_INJECTION_BUILTIN(run_init::classes/directoryiterator.php, pm_php$classes$directoryiterator_php);
  LVariableTable *gVariables ATTRIBUTE_UNUSED = (LVariableTable *)g;
  return true;
}
namespace hphp_impl_splitter {}

///////////////////////////////////////////////////////////////////////////////
}
